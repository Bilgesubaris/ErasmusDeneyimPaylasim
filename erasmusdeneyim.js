// BeÄŸeni iÅŸlemleri
async function likeExperience(experienceId) {
    if (!currentUser) {
        showToast('BeÄŸenmek iÃ§in giriÅŸ yapmalÄ±sÄ±nÄ±z', 'warning');
        return;
    }

    try {
        const experienceRef = doc(db, 'experiences', experienceId);
        const experienceDoc = await getDoc(experienceRef);
        
        if (!experienceDoc.exists()) {
            throw new Error('Deneyim bulunamadÄ±');
        }

        const experience = experienceDoc.data();
        const likes = experience.likes || [];
        const hasLiked = likes.includes(currentUser.uid);

        if (hasLiked) {
            // BeÄŸeniyi kaldÄ±r
            await updateDoc(experienceRef, {
                likes: arrayRemove(currentUser.uid)
            });
            showToast('BeÄŸeni kaldÄ±rÄ±ldÄ±', 'info');
        } else {
            // BeÄŸeni ekle
            await updateDoc(experienceRef, {
                likes: arrayUnion(currentUser.uid)
            });
            showToast('Deneyim beÄŸenildi', 'success');
        }

        // UI'Ä± gÃ¼ncelle
        updateLikeUI(experienceId, !hasLiked);
    } catch (error) {
        console.error('BeÄŸeni hatasÄ±:', error);
        showToast('BeÄŸeni iÅŸlemi baÅŸarÄ±sÄ±z oldu', 'error');
    }
}

// BeÄŸeni UI'Ä±nÄ± gÃ¼ncelle
function updateLikeUI(experienceId, isLiked) {
    const likeButton = document.querySelector(`[data-experience-id="${experienceId}"] .like-button`);
    if (likeButton) {
        const icon = likeButton.querySelector('i');
        const count = likeButton.querySelector('.like-count');
        
        if (isLiked) {
            icon.classList.remove('far');
            icon.classList.add('fas');
            icon.style.color = '#E0245E';
            count.textContent = parseInt(count.textContent) + 1;
        } else {
            icon.classList.remove('fas');
            icon.classList.add('far');
            icon.style.color = '';
            count.textContent = parseInt(count.textContent) - 1;
        }
    }
}

// Deneyim paylaÅŸma
async function shareExperience(experienceId) {
    try {
        const experienceRef = doc(db, 'experiences', experienceId);
        const experienceDoc = await getDoc(experienceRef);
        
        if (!experienceDoc.exists()) {
            throw new Error('Deneyim bulunamadÄ±');
        }

        const experience = experienceDoc.data();
        const shareUrl = `${window.location.origin}/deneyim/${experienceId}`;
        
        if (navigator.share) {
            await navigator.share({
                title: experience.title,
                text: `${experience.username}'in Erasmus deneyimi: ${experience.title}`,
                url: shareUrl
            });
        } else {
            await navigator.clipboard.writeText(shareUrl);
            showToast('Deneyim linki kopyalandÄ±!', 'success');
        }
    } catch (error) {
        console.error('PaylaÅŸÄ±m hatasÄ±:', error);
        showToast('PaylaÅŸÄ±m baÅŸarÄ±sÄ±z oldu', 'error');
    }
}

// Deneyim kaydetme
async function saveExperience(experienceId) {
    if (!currentUser) {
        showToast('Kaydetmek iÃ§in giriÅŸ yapmalÄ±sÄ±nÄ±z', 'warning');
        return;
    }

    try {
        const userRef = doc(db, 'users', currentUser.uid);
        const userDoc = await getDoc(userRef);
        
        if (!userDoc.exists()) {
            throw new Error('KullanÄ±cÄ± bulunamadÄ±');
        }

        const user = userDoc.data();
        const savedExperiences = user.savedExperiences || [];
        const isSaved = savedExperiences.includes(experienceId);

        if (isSaved) {
            // KaydÄ± kaldÄ±r
            await updateDoc(userRef, {
                savedExperiences: arrayRemove(experienceId)
            });
            showToast('Deneyim kaydedilenlerden kaldÄ±rÄ±ldÄ±', 'info');
        } else {
            // Kaydet
            await updateDoc(userRef, {
                savedExperiences: arrayUnion(experienceId)
            });
            showToast('Deneyim kaydedildi', 'success');
        }

        // UI'Ä± gÃ¼ncelle
        updateSaveUI(experienceId, !isSaved);
    } catch (error) {
        console.error('Kaydetme hatasÄ±:', error);
        showToast('Kaydetme iÅŸlemi baÅŸarÄ±sÄ±z oldu', 'error');
    }
}

// Kaydetme UI'Ä±nÄ± gÃ¼ncelle
function updateSaveUI(experienceId, isSaved) {
    const saveButton = document.querySelector(`[data-experience-id="${experienceId}"] .save-button`);
    if (saveButton) {
        const icon = saveButton.querySelector('i');
        
        if (isSaved) {
            icon.classList.remove('far');
            icon.classList.add('fas');
            icon.style.color = '#17BF63';
        } else {
            icon.classList.remove('fas');
            icon.classList.add('far');
            icon.style.color = '';
        }
    }
}

// Emoji ekleme
function addEmoji() {
    const textarea = document.getElementById('commentText');
    const emoji = 'ðŸ˜Š'; // Ã–rnek emoji
    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    const text = textarea.value;
    const newText = text.substring(0, start) + emoji + text.substring(end);
    textarea.value = newText;
    textarea.focus();
    textarea.selectionStart = textarea.selectionEnd = start + emoji.length;
}

// FotoÄŸraf ekleme
function addPhoto() {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = 'image/*';
    input.onchange = async (e) => {
        const file = e.target.files[0];
        if (file) {
            try {
                const storageRef = ref(storage, `comments/${Date.now()}_${file.name}`);
                await uploadBytes(storageRef, file);
                const url = await getDownloadURL(storageRef);
                
                const textarea = document.getElementById('commentText');
                const imageMarkdown = `![FotoÄŸraf](${url})`;
                textarea.value += '\n' + imageMarkdown;
            } catch (error) {
                console.error('FotoÄŸraf yÃ¼kleme hatasÄ±:', error);
                showToast('FotoÄŸraf yÃ¼klenemedi', 'error');
            }
        }
    };
    input.click();
} 